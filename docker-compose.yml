version: '3.8'

services:
  # Redis - Message broker for microservices
  redis:
    image: redis:7-alpine
    container_name: learn-monorepos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: .
      dockerfile: apps/user-service/Dockerfile
    container_name: learn-monorepos-user-service
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: apps/order-service/Dockerfile
    container_name: learn-monorepos-order-service
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: learn-monorepos-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - USER_SERVICE_HOST=user-service
      - ORDER_SERVICE_HOST=order-service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
      - user-service
      - order-service
    networks:
      - microservices
    restart: unless-stopped

networks:
  microservices:
    driver: bridge

volumes:
  redis_data:
    driver: local